var N = null;var searchIndex = {};
searchIndex["js_sys"]={"doc":"Bindings to JavaScript's standard, built-in objects, including their methods and properties.","items":[[3,"Array","js_sys","",N,N],[3,"ArrayBuffer","","",N,N],[3,"ArrayIterator","","",N,N],[3,"Boolean","","",N,N],[3,"DataView","","",N,N],[3,"Error","","",N,N],[3,"Float32Array","","",N,N],[3,"Float64Array","","",N,N],[3,"Function","","",N,N],[3,"Generator","","",N,N],[3,"Int8Array","","",N,N],[3,"Int16Array","","",N,N],[3,"Int32Array","","",N,N],[3,"Map","","",N,N],[3,"MapIterator","","",N,N],[3,"Math","","",N,N],[3,"Number","","",N,N],[3,"Date","","",N,N],[3,"Object","","",N,N],[3,"Proxy","","",N,N],[3,"Reflect","","",N,N],[3,"Set","","",N,N],[3,"SetIterator","","",N,N],[3,"Uint8Array","","",N,N],[3,"Uint8ClampedArray","","",N,N],[3,"Uint16Array","","",N,N],[3,"Uint32Array","","",N,N],[3,"WeakMap","","",N,N],[3,"WeakSet","","",N,N],[3,"WebAssembly","","",N,N],[3,"JsString","","",N,N],[3,"Symbol","","",N,N],[3,"Intl","","",N,N],[5,"decode_uri","","The `decodeURI()` function decodes a Uniform Resource Identifier (URI) previously created by `encodeURI` or by a similar routine.",N,[[["str"]],["result",["jsstring","jsvalue"]]]],[5,"decode_uri_component","","The decodeURIComponent() function decodes a Uniform Resource Identifier (URI) component previously created by encodeURIComponent or by a similar routine.",N,[[["str"]],["result",["jsstring","jsvalue"]]]],[5,"encode_uri","","The `encodeURI()` function encodes a Uniform Resource Identifier (URI) by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two \"surrogate\" characters).",N,[[["str"]],["jsstring"]]],[5,"encode_uri_component","","The encodeURIComponent() function encodes a Uniform Resource Identifier (URI) component by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two \"surrogate\" characters).",N,[[["str"]],["jsstring"]]],[5,"eval","","The `eval()` function evaluates JavaScript code represented as a string.",N,[[["str"]],["result",["jsvalue","jsvalue"]]]],[5,"is_finite","","The global isFinite() function determines whether the passed value is a finite number. If  needed, the parameter is first converted to a number.",N,[[["jsvalue"]],["bool"]]],[5,"parse_int","","The `parseInt()` function parses a string argument and returns an integer of the specified radix (the base in mathematical numeral systems), or NaN on error.",N,[[["str"],["u8"]],["f64"]]],[5,"parse_float","","The parseFloat() function parses an argument and returns a floating point number, or NaN on error.",N,[[["str"]],["f64"]]],[5,"escape","","The escape() function computes a new string in which certain characters have been replaced by a hexadecimal escape sequence.",N,[[["str"]],["jsstring"]]],[11,"describe","","",0,[[]]],[11,"into_abi","","",0,N],[11,"none","","",0,N],[11,"from_abi","","",0,N],[11,"is_none","","",0,N],[11,"ref_from_abi","","",0,N],[11,"from","","",0,[[["jsvalue"]],["array"]]],[11,"new","","Creates a new empty array",0,[[],["array"]]],[11,"from","","The `Array.from()` method creates a new, shallow-copied `Array` instance from an array-like or iterable object.",0,[[["jsvalue"]],["array"]]],[11,"copy_within","","The copyWithin() method shallow copies part of an array to another location in the same array and returns it, without modifying its size.",0,[[["self"],["i32"],["i32"],["i32"]],["array"]]],[11,"concat","","The concat() method is used to merge two or more arrays. This method does not change the existing arrays, but instead returns a new array.",0,[[["self"],["array"]],["array"]]],[11,"every","","The every() method tests whether all elements in the array pass the test implemented by the provided function.",0,[[["self"],["fnmut"]],["bool"]]],[11,"fill","","The fill() method fills all the elements of an array from a start index to an end index with a static value. The end index is not included.",0,[[["self"],["jsvalue"],["u32"],["u32"]],["array"]]],[11,"filter","","The `filter()` method creates a new array with all elements that pass the test implemented by the provided function.",0,[[["self"],["fnmut"]],["array"]]],[11,"find","","The `find()` method returns the value of the first element in the array that satisfies  the provided testing function. Otherwise `undefined` is returned.",0,[[["self"],["fnmut"]],["jsvalue"]]],[11,"find_index","","The findIndex() method returns the index of the first element in the array that satisfies the provided testing function. Otherwise -1 is returned.",0,[[["self"],["fnmut"]],["i32"]]],[11,"for_each","","The `forEach()` method executes a provided function once for each array element.",0,[[["self"],["fnmut"]]]],[11,"includes","","The includes() method determines whether an array includes a certain element, returning true or false as appropriate.",0,[[["self"],["jsvalue"],["i32"]],["bool"]]],[11,"index_of","","The indexOf() method returns the first index at which a given element can be found in the array, or -1 if it is not present.",0,[[["self"],["jsvalue"],["i32"]],["i32"]]],[11,"is_array","","The Array.isArray() method determines whether the passed value is an Array.",0,[[["jsvalue"]],["bool"]]],[11,"join","","The join() method joins all elements of an array (or an array-like object) into a string and returns this string.",0,[[["self"],["str"]],["jsstring"]]],[11,"last_index_of","","The lastIndexOf() method returns the last index at which a given element can be found in the array, or -1 if it is not present. The array is searched backwards, starting at fromIndex.",0,[[["self"],["jsvalue"],["i32"]],["i32"]]],[11,"length","","The length property of an object which is an instance of type Array sets or returns the number of elements in that array. The value is an unsigned, 32-bit integer that is always numerically greater than the highest index in the array.",0,[[["self"]],["u32"]]],[11,"map","","map calls a provided callback function once for each element in an array, in order, and constructs a new array from the results. callback is invoked only for indexes of the array which have assigned values, including undefined. It is not called for missing elements of the array (that is, indexes that have never been set, which have been deleted or which have never been assigned a value).",0,[[["self"],["fnmut"]],["array"]]],[11,"pop","","The pop() method removes the last element from an array and returns that element. This method changes the length of the array.",0,[[["self"]],["jsvalue"]]],[11,"push","","The push() method adds one or more elements to the end of an array and returns the new length of the array.",0,[[["self"],["jsvalue"]],["u32"]]],[11,"reduce","","The reduce() method applies a function against an accumulator and each element in the array (from left to right) to reduce it to a single value.",0,[[["self"],["fnmut"],["jsvalue"]],["jsvalue"]]],[11,"reduce_right","","The reduceRight() method applies a function against an accumulator and each value of the array (from right-to-left) to reduce it to a single value.",0,[[["self"],["fnmut"],["jsvalue"]],["jsvalue"]]],[11,"reverse","","The reverse() method reverses an array in place. The first array element becomes the last, and the last array element becomes the first.",0,[[["self"]],["array"]]],[11,"shift","","The shift() method removes the first element from an array and returns that removed element. This method changes the length of the array.",0,[[["self"]],["jsvalue"]]],[11,"slice","","The slice() method returns a shallow copy of a portion of an array into a new array object selected from begin to end (end not included). The original array will not be modified.",0,[[["self"],["u32"],["u32"]],["array"]]],[11,"some","","The some() method tests whether at least one element in the array passes the test implemented by the provided function. Note: This method returns false for any condition put on an empty array. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some",0,[[["self"],["fnmut"]],["bool"]]],[11,"sort","","The sort() method sorts the elements of an array in place and returns the array. The sort is not necessarily stable. The default sort order is according to string Unicode code points.",0,[[["self"]],["array"]]],[11,"to_locale_string","","The toLocaleString() method returns a string representing the elements of the array. The elements are converted to Strings using their toLocaleString methods and these Strings are separated by a locale-specific String (such as a comma “,”).",0,[[["self"],["jsvalue"],["jsvalue"]],["jsstring"]]],[11,"to_string","","The toString() method returns a string representing the specified array and its elements.",0,[[["self"]],["jsstring"]]],[11,"unshift","","The unshift() method adds one or more elements to the beginning of an array and returns the new length of the array.",0,[[["self"],["jsvalue"]],["u32"]]],[11,"describe","","",1,[[]]],[11,"into_abi","","",1,N],[11,"none","","",1,N],[11,"from_abi","","",1,N],[11,"is_none","","",1,N],[11,"ref_from_abi","","",1,N],[11,"from","","",1,[[["jsvalue"]],["arraybuffer"]]],[11,"new","","The `ArrayBuffer` object is used to represent a generic, fixed-length raw binary data buffer. You cannot directly manipulate the contents of an `ArrayBuffer`; instead, you create one of the typed array objects or a `DataView` object which represents the buffer in a specific format, and use that to read and write the contents of the buffer.",1,[[["u32"]],["arraybuffer"]]],[11,"is_view","","The `isView()` method returns true if arg is one of the `ArrayBuffer` views, such as typed array objects or a DataView; false otherwise.",1,[[["jsvalue"]],["bool"]]],[11,"slice","","The `slice()` method returns a new `ArrayBuffer` whose contents are a copy of this `ArrayBuffer`'s bytes from begin, inclusive, up to end, exclusive.",1,[[["self"],["u32"]],["arraybuffer"]]],[11,"slice_with_end","","Like `slice()` but with the `end` argument.",1,[[["self"],["u32"],["u32"]],["arraybuffer"]]],[11,"describe","","",2,[[]]],[11,"into_abi","","",2,N],[11,"none","","",2,N],[11,"from_abi","","",2,N],[11,"is_none","","",2,N],[11,"ref_from_abi","","",2,N],[11,"from","","",2,[[["jsvalue"]],["arrayiterator"]]],[11,"keys","","The keys() method returns a new Array Iterator object that contains the keys for each index in the array.",0,[[["self"]],["arrayiterator"]]],[11,"entries","","The entries() method returns a new Array Iterator object that contains the key/value pairs for each index in the array.",0,[[["self"]],["arrayiterator"]]],[11,"values","","The values() method returns a new Array Iterator object that contains the values for each index in the array.",0,[[["self"]],["arrayiterator"]]],[11,"describe","","",3,[[]]],[11,"into_abi","","",3,N],[11,"none","","",3,N],[11,"from_abi","","",3,N],[11,"is_none","","",3,N],[11,"ref_from_abi","","",3,N],[11,"from","","",3,[[["jsvalue"]],["boolean"]]],[11,"new","","The `Boolean()` constructor creates an object wrapper for a boolean value.",3,[[["jsvalue"]],["boolean"]]],[11,"value_of","","The `valueOf()` method returns the primitive value of a `Boolean` object.",3,[[["self"]],["bool"]]],[11,"describe","","",4,[[]]],[11,"into_abi","","",4,N],[11,"none","","",4,N],[11,"from_abi","","",4,N],[11,"is_none","","",4,N],[11,"ref_from_abi","","",4,N],[11,"from","","",4,[[["jsvalue"]],["dataview"]]],[11,"new","","The `DataView` view provides a low-level interface for reading and writing multiple number types in an `ArrayBuffer` irrespective of the platform's endianness.",4,[[["arraybuffer"],["usize"],["usize"]],["dataview"]]],[11,"buffer","","The ArrayBuffer referenced by this view. Fixed at construction time and thus read only.",4,[[["self"]],["arraybuffer"]]],[11,"byte_length","","The length (in bytes) of this view from the start of its ArrayBuffer. Fixed at construction time and thus read only.",4,[[["self"]],["usize"]]],[11,"byte_offset","","The offset (in bytes) of this view from the start of its ArrayBuffer. Fixed at construction time and thus read only.",4,[[["self"]],["usize"]]],[11,"get_int8","","The getInt8() method gets a signed 8-bit integer (byte) at the specified byte offset from the start of the DataView.",4,[[["self"],["usize"]],["i8"]]],[11,"get_uint8","","The getUint8() method gets a unsigned 8-bit integer (byte) at the specified byte offset from the start of the DataView.",4,[[["self"],["usize"]],["u8"]]],[11,"get_int16","","The getInt16() method gets a signed 16-bit integer (byte) at the specified byte offset from the start of the DataView.",4,[[["self"],["usize"]],["i16"]]],[11,"get_uint16","","The getUint16() an unsigned 16-bit integer (unsigned byte) at the specified byte offset from the start of the view.",4,[[["self"],["usize"]],["u16"]]],[11,"get_int32","","The getInt32() method gets a signed 16-bit integer (byte) at the specified byte offset from the start of the DataView.",4,[[["self"],["usize"]],["i32"]]],[11,"get_uint32","","The getUint32() an unsigned 16-bit integer (unsigned byte) at the specified byte offset from the start of the view.",4,[[["self"],["usize"]],["u32"]]],[11,"get_float32","","The getFloat32() method gets a signed 32-bit float (float) at the specified byte offset from the start of the DataView.",4,[[["self"],["usize"]],["f32"]]],[11,"get_float64","","The getFloat64() method gets a signed 32-bit float (float) at the specified byte offset from the start of the DataView.",4,[[["self"],["usize"]],["f64"]]],[11,"set_int8","","The setInt8() method stores a signed 8-bit integer (byte) value at the specified byte offset from the start of the DataView.",4,[[["self"],["usize"],["i8"]]]],[11,"set_uint8","","The setUint8() method stores an unsigned 8-bit integer (byte) value at the specified byte offset from the start of the DataView.",4,[[["self"],["usize"],["u8"]]]],[11,"set_int16","","The setInt16() method stores a signed 16-bit integer (byte) value at the specified byte offset from the start of the DataView.",4,[[["self"],["usize"],["i16"]]]],[11,"set_uint16","","The setUint16() method stores an unsigned 16-bit integer (byte) value at the specified byte offset from the start of the DataView.",4,[[["self"],["usize"],["u16"]]]],[11,"set_int32","","The setInt32() method stores a signed 32-bit integer (byte) value at the specified byte offset from the start of the DataView.",4,[[["self"],["usize"],["i32"]]]],[11,"set_uint32","","The setUint32() method stores an unsigned 32-bit integer (byte) value at the specified byte offset from the start of the DataView.",4,[[["self"],["usize"],["u32"]]]],[11,"set_float32","","The setFloat32() method stores a signed 32-bit float (float) value at the specified byte offset from the start of the DataView.",4,[[["self"],["usize"],["f32"]]]],[11,"set_float64","","The setFloat64() method stores a signed 64-bit float (float) value at the specified byte offset from the start of the DataView.",4,[[["self"],["usize"],["f64"]]]],[11,"describe","","",5,[[]]],[11,"into_abi","","",5,N],[11,"none","","",5,N],[11,"from_abi","","",5,N],[11,"is_none","","",5,N],[11,"ref_from_abi","","",5,N],[11,"from","","",5,[[["jsvalue"]],["error"]]],[11,"new","","The Error constructor creates an error object. Instances of Error objects are thrown when runtime errors occur. The Error object can also be used as a base object for user-defined exceptions. See below for standard built-in error types.",5,[[["jsstring"]],["error"]]],[11,"message","","The message property is a human-readable description of the error.",5,[[["self"]],["jsstring"]]],[11,"set_message","","",5,[[["self"],["jsstring"]]]],[11,"name","","The name property represents a name for the type of error. The initial value is \"Error\".",5,[[["self"]],["jsstring"]]],[11,"set_name","","",5,[[["self"],["jsstring"]]]],[11,"to_string","","The toString() method returns a string representing the specified Error object",5,[[["self"]],["jsstring"]]],[11,"describe","","",6,[[]]],[11,"into_abi","","",6,N],[11,"none","","",6,N],[11,"from_abi","","",6,N],[11,"is_none","","",6,N],[11,"ref_from_abi","","",6,N],[11,"from","","",6,[[["jsvalue"]],["float32array"]]],[11,"new","","The `Float32Array()` constructor creates an array of 32-bit floats.",6,[[["jsvalue"]],["float32array"]]],[11,"fill","","The fill() method fills all the elements of an array from a start index to an end index with a static value. The end index is not included.",6,[[["self"],["f32"],["u32"],["u32"]],["float32array"]]],[11,"buffer","","The `buffer` accessor property represents the `ArrayBuffer` referenced by a `TypedArray` at construction time.",6,[[["self"]],["arraybuffer"]]],[11,"subarray","","The `subarray()` method stores multiple values in the typed array, reading input values from a specified array.",6,[[["self"],["u32"],["u32"]],["float32array"]]],[11,"for_each","","The `forEach()` method executes a provided function once per array element. This method has the same algorithm as `Array.prototype.forEach()`. `TypedArray` is one of the typed array types here.",6,[[["self"],["fnmut"]]]],[11,"length","","The `length` accessor property represents the length (in elements) of a typed array.",6,[[["self"]],["u32"]]],[11,"byte_length","","The `byteLength` accessor property represents the length (in bytes) of a typed array.",6,[[["self"]],["u32"]]],[11,"byte_offset","","The `byteOffset` accessor property represents the offset (in bytes) of a typed array from the start of its `ArrayBuffer`.",6,[[["self"]],["u32"]]],[11,"describe","","",7,[[]]],[11,"into_abi","","",7,N],[11,"none","","",7,N],[11,"from_abi","","",7,N],[11,"is_none","","",7,N],[11,"ref_from_abi","","",7,N],[11,"from","","",7,[[["jsvalue"]],["float64array"]]],[11,"new","","The `Float64Array()` constructor creates an array of 64-bit floats.",7,[[["jsvalue"]],["float64array"]]],[11,"fill","","The fill() method fills all the elements of an array from a start index to an end index with a static value. The end index is not included.",7,[[["self"],["f64"],["u32"],["u32"]],["float64array"]]],[11,"buffer","","The `buffer` accessor property represents the `ArrayBuffer` referenced by a `TypedArray` at construction time.",7,[[["self"]],["arraybuffer"]]],[11,"subarray","","The `subarray()` method stores multiple values in the typed array, reading input values from a specified array.",7,[[["self"],["u32"],["u32"]],["float64array"]]],[11,"for_each","","The `forEach()` method executes a provided function once per array element. This method has the same algorithm as `Array.prototype.forEach()`. `TypedArray` is one of the typed array types here.",7,[[["self"],["fnmut"]]]],[11,"length","","The `length` accessor property represents the length (in elements) of a typed array.",7,[[["self"]],["u32"]]],[11,"byte_length","","The `byteLength` accessor property represents the length (in bytes) of a typed array.",7,[[["self"]],["u32"]]],[11,"byte_offset","","The `byteOffset` accessor property represents the offset (in bytes) of a typed array from the start of its `ArrayBuffer`.",7,[[["self"]],["u32"]]],[11,"describe","","",8,[[]]],[11,"into_abi","","",8,N],[11,"none","","",8,N],[11,"from_abi","","",8,N],[11,"is_none","","",8,N],[11,"ref_from_abi","","",8,N],[11,"from","","",8,[[["jsvalue"]],["function"]]],[11,"apply","","The apply() method calls a function with a given this value, and arguments provided as an array (or an array-like object).",8,[[["self"],["jsvalue"],["array"]],["result",["jsvalue","jsvalue"]]]],[11,"bind","","The bind() method creates a new function that, when called, has its this keyword set to the provided value, with a given sequence of arguments preceding any provided when the new function is called.",8,[[["self"],["jsvalue"]],["function"]]],[11,"length","","The length property indicates the number of arguments expected by the function.",8,[[["self"]],["u32"]]],[11,"name","","A Function object's read-only name property indicates the function's name as specified when it was created or \"anonymous\" for functions created anonymously.",8,[[["self"]],["jsstring"]]],[11,"to_string","","The toString() method returns a string representing the source code of the function.",8,[[["self"]],["jsstring"]]],[11,"try_from","","Returns the `Function` value of this JS value if it's an instance of a function.",8,[[["jsvalue"]],["option",["function"]]]],[11,"describe","","",9,[[]]],[11,"into_abi","","",9,N],[11,"none","","",9,N],[11,"from_abi","","",9,N],[11,"is_none","","",9,N],[11,"ref_from_abi","","",9,N],[11,"from","","",9,[[["jsvalue"]],["generator"]]],[11,"next","","The next() method returns an object with two properties done and value. You can also provide a parameter to the next method to send a value to the generator.",9,[[["self"],["jsvalue"]],["result",["jsvalue","jsvalue"]]]],[11,"return_","","The return() method returns the given value and finishes the generator.",9,[[["self"],["jsvalue"]],["jsvalue"]]],[11,"throw","","The throw() method resumes the execution of a generator by throwing an error into it and returns an object with two properties done and value.",9,[[["self"],["error"]],["result",["jsvalue","jsvalue"]]]],[11,"describe","","",10,[[]]],[11,"into_abi","","",10,N],[11,"none","","",10,N],[11,"from_abi","","",10,N],[11,"is_none","","",10,N],[11,"ref_from_abi","","",10,N],[11,"from","","",10,[[["jsvalue"]],["int8array"]]],[11,"new","","The `Int8Array()` constructor creates an array of signed 8-bit integers.",10,[[["jsvalue"]],["int8array"]]],[11,"fill","","The fill() method fills all the elements of an array from a start index to an end index with a static value. The end index is not included.",10,[[["self"],["i8"],["u32"],["u32"]],["int8array"]]],[11,"buffer","","The `buffer` accessor property represents the `ArrayBuffer` referenced by a `TypedArray` at construction time.",10,[[["self"]],["arraybuffer"]]],[11,"subarray","","The `subarray()` method stores multiple values in the typed array, reading input values from a specified array.",10,[[["self"],["u32"],["u32"]],["int8array"]]],[11,"for_each","","The `forEach()` method executes a provided function once per array element. This method has the same algorithm as `Array.prototype.forEach()`. `TypedArray` is one of the typed array types here.",10,[[["self"],["fnmut"]]]],[11,"length","","The `length` accessor property represents the length (in elements) of a typed array.",10,[[["self"]],["u32"]]],[11,"byte_length","","The `byteLength` accessor property represents the length (in bytes) of a typed array.",10,[[["self"]],["u32"]]],[11,"byte_offset","","The `byteOffset` accessor property represents the offset (in bytes) of a typed array from the start of its `ArrayBuffer`.",10,[[["self"]],["u32"]]],[11,"describe","","",11,[[]]],[11,"into_abi","","",11,N],[11,"none","","",11,N],[11,"from_abi","","",11,N],[11,"is_none","","",11,N],[11,"ref_from_abi","","",11,N],[11,"from","","",11,[[["jsvalue"]],["int16array"]]],[11,"new","","The `Int16Array()` constructor creates an array of signed 16-bit integers.",11,[[["jsvalue"]],["int16array"]]],[11,"fill","","The fill() method fills all the elements of an array from a start index to an end index with a static value. The end index is not included.",11,[[["self"],["i16"],["u32"],["u32"]],["int16array"]]],[11,"buffer","","The `buffer` accessor property represents the `ArrayBuffer` referenced by a `TypedArray` at construction time.",11,[[["self"]],["arraybuffer"]]],[11,"subarray","","The `subarray()` method stores multiple values in the typed array, reading input values from a specified array.",11,[[["self"],["u32"],["u32"]],["int16array"]]],[11,"for_each","","The `forEach()` method executes a provided function once per array element. This method has the same algorithm as `Array.prototype.forEach()`. `TypedArray` is one of the typed array types here.",11,[[["self"],["fnmut"]]]],[11,"length","","The `length` accessor property represents the length (in elements) of a typed array.",11,[[["self"]],["u32"]]],[11,"byte_length","","The `byteLength` accessor property represents the length (in bytes) of a typed array.",11,[[["self"]],["u32"]]],[11,"byte_offset","","The `byteOffset` accessor property represents the offset (in bytes) of a typed array from the start of its `ArrayBuffer`.",11,[[["self"]],["u32"]]],[11,"describe","","",12,[[]]],[11,"into_abi","","",12,N],[11,"none","","",12,N],[11,"from_abi","","",12,N],[11,"is_none","","",12,N],[11,"ref_from_abi","","",12,N],[11,"from","","",12,[[["jsvalue"]],["int32array"]]],[11,"new","","The `Int32Array()` constructor creates an array of signed 32-bit integers.",12,[[["jsvalue"]],["int32array"]]],[11,"fill","","The fill() method fills all the elements of an array from a start index to an end index with a static value. The end index is not included.",12,[[["self"],["i32"],["u32"],["u32"]],["int32array"]]],[11,"buffer","","The `buffer` accessor property represents the `ArrayBuffer` referenced by a `TypedArray` at construction time.",12,[[["self"]],["arraybuffer"]]],[11,"subarray","","The `subarray()` method stores multiple values in the typed array, reading input values from a specified array.",12,[[["self"],["u32"],["u32"]],["int32array"]]],[11,"for_each","","The `forEach()` method executes a provided function once per array element. This method has the same algorithm as `Array.prototype.forEach()`. `TypedArray` is one of the typed array types here.",12,[[["self"],["fnmut"]]]],[11,"length","","The `length` accessor property represents the length (in elements) of a typed array.",12,[[["self"]],["u32"]]],[11,"byte_length","","The `byteLength` accessor property represents the length (in bytes) of a typed array.",12,[[["self"]],["u32"]]],[11,"byte_offset","","The `byteOffset` accessor property represents the offset (in bytes) of a typed array from the start of its `ArrayBuffer`.",12,[[["self"]],["u32"]]],[11,"describe","","",13,[[]]],[11,"into_abi","","",13,N],[11,"none","","",13,N],[11,"from_abi","","",13,N],[11,"is_none","","",13,N],[11,"ref_from_abi","","",13,N],[11,"from","","",13,[[["jsvalue"]],["map"]]],[11,"clear","","The clear() method removes all elements from a Map object.",13,[[["self"]]]],[11,"delete","","The delete() method removes the specified element from a Map object.",13,[[["self"],["jsvalue"]],["bool"]]],[11,"for_each","","The forEach() method executes a provided function once per each key/value pair in the Map object, in insertion order.",13,[[["self"],["fnmut"]]]],[11,"get","","The get() method returns a specified element from a Map object.",13,[[["self"],["jsvalue"]],["jsvalue"]]],[11,"has","","The has() method returns a boolean indicating whether an element with the specified key exists or not.",13,[[["self"],["jsvalue"]],["bool"]]],[11,"new","","The Map object holds key-value pairs. Any value (both objects and primitive values) maybe used as either a key or a value.",13,[[],["map"]]],[11,"set","","The set() method adds or updates an element with a specified key and value to a Map object.",13,[[["self"],["jsvalue"],["jsvalue"]],["map"]]],[11,"size","","The value of size is an integer representing how many entries the Map object has. A set accessor function for size is undefined; you can not change this property.",13,[[["self"]],["u32"]]],[11,"describe","","",14,[[]]],[11,"into_abi","","",14,N],[11,"none","","",14,N],[11,"from_abi","","",14,N],[11,"is_none","","",14,N],[11,"ref_from_abi","","",14,N],[11,"from","","",14,[[["jsvalue"]],["mapiterator"]]],[11,"entries","","The entries() method returns a new Iterator object that contains the [key, value] pairs for each element in the Map object in insertion order.",13,[[["self"]],["mapiterator"]]],[11,"keys","","The keys() method returns a new Iterator object that contains the keys for each element in the Map object in insertion order.",13,[[["self"]],["mapiterator"]]],[11,"values","","The values() method returns a new Iterator object that contains the values for each element in the Map object in insertion order.",13,[[["self"]],["mapiterator"]]],[11,"describe","","",15,[[]]],[11,"into_abi","","",15,N],[11,"none","","",15,N],[11,"from_abi","","",15,N],[11,"is_none","","",15,N],[11,"ref_from_abi","","",15,N],[11,"from","","",15,[[["jsvalue"]],["math"]]],[11,"abs","","The Math.abs() function returns the absolute value of a number, that is Math.abs(x) = |x|",15,[[["f64"]],["f64"]]],[11,"acos","","The Math.acos() function returns the arccosine (in radians) of a number, that is ∀x∊[-1;1] Math.acos(x) = arccos(x) = the unique y∊[0;π] such that cos(y)=x",15,[[["f64"]],["f64"]]],[11,"acosh","","The Math.acosh() function returns the hyperbolic arc-cosine of a number, that is ∀x ≥ 1 Math.acosh(x) = arcosh(x) = the unique y ≥ 0 such that cosh(y) = x",15,[[["f64"]],["f64"]]],[11,"asin","","The Math.asin() function returns the arcsine (in radians) of a number, that is ∀x ∊ [-1;1] Math.asin(x) = arcsin(x) = the unique y∊[-π2;π2] such that sin(y) = x",15,[[["f64"]],["f64"]]],[11,"asinh","","The Math.asinh() function returns the hyperbolic arcsine of a number, that is Math.asinh(x) = arsinh(x) = the unique y such that sinh(y) = x",15,[[["f64"]],["f64"]]],[11,"atan","","The Math.atan() function returns the arctangent (in radians) of a number, that is Math.atan(x) = arctan(x) = the unique y ∊ [-π2;π2]such that tan(y) = x",15,[[["f64"]],["f64"]]],[11,"atan2","","The Math.atan2() function returns the arctangent of the quotient of its arguments.",15,[[["f64"],["f64"]],["f64"]]],[11,"atanh","","The Math.atanh() function returns the hyperbolic arctangent of a number, that is ∀x ∊ (-1,1), Math.atanh(x) = arctanh(x) = the unique y such that tanh(y) = x",15,[[["f64"]],["f64"]]],[11,"cbrt","","The Math.cbrt() function returns the cube root of a number, that is Math.cbrt(x) = x^3 = the unique y such that y^3 = x",15,[[["f64"]],["f64"]]],[11,"ceil","","The Math.ceil() function returns the smallest integer greater than or equal to a given number.",15,[[["f64"]],["f64"]]],[11,"clz32","","The Math.clz32() function returns the number of leading zero bits in the 32-bit binary representation of a number.",15,[[["i32"]],["u32"]]],[11,"cos","","The Math.cos() static function returns the cosine of the specified angle, which must be specified in radians. This value is length(adjacent)/length(hypotenuse).",15,[[["f64"]],["f64"]]],[11,"cosh","","The Math.cosh() function returns the hyperbolic cosine of a number, that can be expressed using the constant e.",15,[[["f64"]],["f64"]]],[11,"exp","","The Math.exp() function returns e^x, where x is the argument, and e is Euler's number (also known as Napier's constant), the base of the natural logarithms.",15,[[["f64"]],["f64"]]],[11,"expm1","","The Math.expm1() function returns e^x - 1, where x is the argument, and e the base of the natural logarithms.",15,[[["f64"]],["f64"]]],[11,"floor","","The Math.floor() function returns the largest integer less than or equal to a given number.",15,[[["f64"]],["f64"]]],[11,"fround","","The Math.fround() function returns the nearest 32-bit single precision float representation of a Number.",15,[[["f64"]],["f32"]]],[11,"imul","","The Math.imul() function returns the result of the C-like 32-bit multiplication of the two parameters.",15,[[["i32"],["i32"]],["i32"]]],[11,"log","","The Math.log() function returns the natural logarithm (base e) of a number. The JavaScript Math.log() function is equivalent to ln(x) in mathematics.",15,[[["f64"]],["f64"]]],[11,"log10","","The Math.log10() function returns the base 10 logarithm of a number.",15,[[["f64"]],["f64"]]],[11,"log1p","","The Math.log1p() function returns the natural logarithm (base e) of 1 + a number. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log1p",15,[[["f64"]],["f64"]]],[11,"log2","","The Math.log2() function returns the base 2 logarithm of a number.",15,[[["f64"]],["f64"]]],[11,"pow","","The Math.pow() function returns the base to the exponent power, that is, base^exponent.",15,[[["f64"],["f64"]],["f64"]]],[11,"random","","The Math.random() function returns a floating-point, pseudo-random number in the range 0–1 (inclusive of 0, but not 1) with approximately uniform distribution over that range — which you can then scale to your desired range. The implementation selects the initial seed to the random number generation algorithm; it cannot be chosen or reset by the user.",15,[[],["f64"]]],[11,"round","","The Math.round() function returns the value of a number rounded to the nearest integer.",15,[[["f64"]],["f64"]]],[11,"sign","","The Math.sign() function returns the sign of a number, indicating whether the number is positive, negative or zero.",15,[[["f64"]],["f64"]]],[11,"sin","","The Math.sin() function returns the sine of a number.",15,[[["f64"]],["f64"]]],[11,"sinh","","The Math.sinh() function returns the hyperbolic sine of a number, that can be expressed using the constant e: Math.sinh(x) = (e^x - e^-x)/2",15,[[["f64"]],["f64"]]],[11,"sqrt","","The Math.sqrt() function returns the square root of a number, that is ∀x ≥ 0, Math.sqrt(x) = √x = the unique y ≥ 0 such that y^2 = x",15,[[["f64"]],["f64"]]],[11,"tan","","The Math.tan() function returns the tangent of a number.",15,[[["f64"]],["f64"]]],[11,"tanh","","The Math.tanh() function returns the hyperbolic tangent of a number, that is tanh x = sinh x / cosh x = (e^x - e^-x)/(e^x + e^-x) = (e^2x - 1)/(e^2x + 1)",15,[[["f64"]],["f64"]]],[11,"trunc","","The Math.trunc() function returns the integer part of a number by removing any fractional digits.",15,[[["f64"]],["f64"]]],[11,"describe","","",16,[[]]],[11,"into_abi","","",16,N],[11,"none","","",16,N],[11,"from_abi","","",16,N],[11,"is_none","","",16,N],[11,"ref_from_abi","","",16,N],[11,"from","","",16,[[["jsvalue"]],["number"]]],[11,"is_finite","","The Number.isFinite() method determines whether the passed value is a finite number.",16,[[["jsvalue"]],["bool"]]],[11,"is_integer","","The Number.isInteger() method determines whether the passed value is an integer.",16,[[["jsvalue"]],["bool"]]],[11,"is_safe_integer","","The Number.isSafeInteger() method determines whether the provided value is a number that is a safe integer.",16,[[["jsvalue"]],["bool"]]],[11,"new","","The `Number` JavaScript object is a wrapper object allowing you to work with numerical values. A `Number` object is created using the `Number()` constructor.",16,[[["jsvalue"]],["number"]]],[11,"parse_int","","The Number.parseInt() method parses a string argument and returns an integer of the specified radix or base.",16,[[["str"],["u8"]],["number"]]],[11,"parse_float","","The Number.parseFloat() method parses a string argument and returns a floating point number.",16,[[["str"]],["number"]]],[11,"to_locale_string","","The toLocaleString() method returns a string with a language sensitive representation of this number.",16,[[["self"],["str"]],["jsstring"]]],[11,"to_precision","","The toPrecision() method returns a string representing the Number object to the specified precision.",16,[[["self"],["u8"]],["result",["jsstring","jsvalue"]]]],[11,"to_fixed","","The toFixed() method returns a string representing the Number object using fixed-point notation.",16,[[["self"],["u8"]],["result",["jsstring","jsvalue"]]]],[11,"to_exponential","","The toExponential() method returns a string representing the Number object in exponential notation.",16,[[["self"],["u8"]],["result",["jsstring","jsvalue"]]]],[11,"to_string","","The toString() method returns a string representing the specified Number object.",16,[[["self"],["u8"]],["result",["jsstring","jsvalue"]]]],[11,"value_of","","The valueOf() method returns the wrapped primitive value of a Number object.",16,[[["self"]],["f64"]]],[11,"describe","","",17,[[]]],[11,"into_abi","","",17,N],[11,"none","","",17,N],[11,"from_abi","","",17,N],[11,"is_none","","",17,N],[11,"ref_from_abi","","",17,N],[11,"from","","",17,[[["jsvalue"]],["date"]]],[11,"get_date","","The getDate() method returns the day of the month for the specified date according to local time.",17,[[["self"]],["u32"]]],[11,"get_day","","The getDay() method returns the day of the week for the specified date according to local time, where 0 represents Sunday. For the day of the month see getDate().",17,[[["self"]],["u32"]]],[11,"get_full_year","","The getFullYear() method returns the year of the specified date according to local time.",17,[[["self"]],["u32"]]],[11,"get_hours","","The getHours() method returns the hour for the specified date, according to local time.",17,[[["self"]],["u32"]]],[11,"get_milliseconds","","The getMilliseconds() method returns the milliseconds in the specified date according to local time.",17,[[["self"]],["u32"]]],[11,"get_minutes","","The getMinutes() method returns the minutes in the specified date according to local time.",17,[[["self"]],["u32"]]],[11,"get_month","","The getMonth() method returns the month in the specified date according to local time, as a zero-based value (where zero indicates the first month of the year).",17,[[["self"]],["u32"]]],[11,"get_seconds","","The getSeconds() method returns the seconds in the specified date according to local time.",17,[[["self"]],["u32"]]],[11,"get_time","","The getTime() method returns the numeric value corresponding to the time for the specified date according to universal time.",17,[[["self"]],["f64"]]],[11,"get_timezone_offset","","The getTimezoneOffset() method returns the time zone difference, in minutes, from current locale (host system settings) to UTC.",17,[[["self"]],["f64"]]],[11,"get_utc_date","","The getUTCDate() method returns the day (date) of the month in the specified date according to universal time.",17,[[["self"]],["u32"]]],[11,"get_utc_day","","The getUTCDay() method returns the day of the week in the specified date according to universal time, where 0 represents Sunday.",17,[[["self"]],["u32"]]],[11,"get_utc_full_year","","The getUTCFullYear() method returns the year in the specified date according to universal time.",17,[[["self"]],["u32"]]],[11,"get_utc_hours","","The getUTCHours() method returns the hours in the specified date according to universal time.",17,[[["self"]],["u32"]]],[11,"get_utc_milliseconds","","The getUTCMilliseconds() method returns the milliseconds in the specified date according to universal time.",17,[[["self"]],["u32"]]],[11,"get_utc_minutes","","The getUTCMinutes() method returns the minutes in the specified date according to universal time.",17,[[["self"]],["u32"]]],[11,"get_utc_month","","The getUTCMonth() returns the month of the specified date according to universal time, as a zero-based value (where zero indicates the first month of the year).",17,[[["self"]],["u32"]]],[11,"get_utc_seconds","","The getUTCSeconds() method returns the seconds in the specified date according to universal time.",17,[[["self"]],["u32"]]],[11,"new","","Creates a JavaScript Date instance that represents a single moment in time. Date objects are based on a time value that is the number of milliseconds since 1 January 1970 UTC.",17,[[["jsvalue"]],["date"]]],[11,"now","","The `Date.now()` method returns the number of milliseconds elapsed since January 1, 1970 00:00:00 UTC.",17,[[],["f64"]]],[11,"parse","","The Date.parse() method parses a string representation of a date, and returns the number of milliseconds since January 1, 1970, 00:00:00 UTC or NaN if the string is unrecognized or, in some cases, contains illegal date values (e.g. 2015-02-31).",17,[[["jsstring"]],["f64"]]],[11,"set_date","","The setDate() method sets the day of the Date object relative to the beginning of the currently set month.",17,[[["self"],["u32"]],["f64"]]],[11,"set_full_year","","The setFullYear() method sets the full year for a specified date according to local time. Returns new timestamp.",17,[[["self"],["u32"]],["f64"]]],[11,"set_hours","","The setHours() method sets the hours for a specified date according to local time, and returns the number of milliseconds since January 1, 1970 00:00:00 UTC until the time represented by the updated Date instance.",17,[[["self"],["u32"]],["f64"]]],[11,"set_milliseconds","","The setMilliseconds() method sets the milliseconds for a specified date according to local time.",17,[[["self"],["u32"]],["f64"]]],[11,"set_minutes","","The setMinutes() method sets the minutes for a specified date according to local time.",17,[[["self"],["u32"]],["f64"]]],[11,"set_month","","The setMonth() method sets the month for a specified date according to the currently set year.",17,[[["self"],["u32"]],["f64"]]],[11,"set_seconds","","The setSeconds() method sets the seconds for a specified date according to local time.",17,[[["self"],["u32"]],["f64"]]],[11,"set_time","","The setTime() method sets the Date object to the time represented by a number of milliseconds since January 1, 1970, 00:00:00 UTC.",17,[[["self"],["f64"]],["f64"]]],[11,"set_utc_date","","The setUTCDate() method sets the day of the month for a specified date according to universal time.",17,[[["self"],["u32"]],["f64"]]],[11,"set_utc_full_year","","The setUTCFullYear() method sets the full year for a specified date according to universal time.",17,[[["self"],["u32"]],["f64"]]],[11,"set_utc_hours","","The setUTCHours() method sets the hour for a specified date according to universal time, and returns the number of milliseconds since  January 1, 1970 00:00:00 UTC until the time represented by the updated Date instance.",17,[[["self"],["u32"]],["f64"]]],[11,"set_utc_milliseconds","","The setUTCMilliseconds() method sets the milliseconds for a specified date according to universal time.",17,[[["self"],["u32"]],["f64"]]],[11,"set_utc_minutes","","The setUTCMinutes() method sets the minutes for a specified date according to universal time.",17,[[["self"],["u32"]],["f64"]]],[11,"set_utc_month","","The setUTCMonth() method sets the month for a specified date according to universal time.",17,[[["self"],["u32"]],["f64"]]],[11,"set_utc_seconds","","The setUTCSeconds() method sets the seconds for a specified date according to universal time.",17,[[["self"],["u32"]],["f64"]]],[11,"to_date_string","","The toDateString() method returns the date portion of a Date object in human readable form in American English.",17,[[["self"]],["jsstring"]]],[11,"to_iso_string","","The toISOString() method returns a string in simplified extended ISO format (ISO 8601), which is always 24 or 27 characters long (YYYY-MM-DDTHH:mm:ss.sssZ or ±YYYYYY-MM-DDTHH:mm:ss.sssZ, respectively). The timezone is always zero UTC offset, as denoted by the suffix \"Z\"",17,[[["self"]],["jsstring"]]],[11,"to_json","","The toJSON() method returns a string representation of the Date object.",17,[[["self"]],["jsstring"]]],[11,"to_locale_date_string","","The toLocaleDateString() method returns a string with a language sensitive representation of the date portion of this date. The new locales and options arguments let applications specify the language whose formatting conventions should be used and allow to customize the behavior of the function. In older implementations, which ignore the locales and options arguments, the locale used and the form of the string returned are entirely implementation dependent.",17,[[["self"],["jsstring"],["jsvalue"]],["jsstring"]]],[11,"to_locale_string","","The toLocaleString() method returns a string with a language sensitive representation of this date. The new locales and options arguments let applications specify the language whose formatting conventions should be used and customize the behavior of the function. In older implementations, which ignore the locales and options arguments, the locale used and the form of the string returned are entirely implementation dependent.",17,[[["self"],["jsstring"],["jsvalue"]],["jsstring"]]],[11,"to_locale_time_string","","The toLocaleTimeString() method returns a string with a language sensitive representation of the time portion of this date. The new locales and options arguments let applications specify the language whose formatting conventions should be used and customize the behavior of the function. In older implementations, which ignore the locales and options arguments, the locale used and the form of the string returned are entirely implementation dependent.",17,[[["self"],["jsstring"]],["jsstring"]]],[11,"to_string","","The toString() method returns a string representing the specified Date object.",17,[[["self"]],["jsstring"]]],[11,"to_time_string","","The toTimeString() method returns the time portion of a Date object in human readable form in American English.",17,[[["self"]],["jsstring"]]],[11,"to_utc_string","","The toUTCString() method converts a date to a string, using the UTC time zone.",17,[[["self"]],["jsstring"]]],[11,"utc","","The `Date.UTC()` method accepts the same parameters as the longest form of the constructor, and returns the number of milliseconds in a `Date` object since January 1, 1970, 00:00:00, universal time.",17,[[["f64"],["f64"]],["f64"]]],[11,"value_of","","The valueOf() method  returns the primitive value of a Date object.",17,[[["self"]],["f64"]]],[11,"describe","","",18,[[]]],[11,"into_abi","","",18,N],[11,"none","","",18,N],[11,"from_abi","","",18,N],[11,"is_none","","",18,N],[11,"ref_from_abi","","",18,N],[11,"from","","",18,[[["jsvalue"]],["object"]]],[11,"freeze","","The `Object.freeze()` method freezes an object: that is, prevents new properties from being added to it; prevents existing properties from being removed; and prevents existing properties, or their enumerability, configurability, or writability, from being changed, it also prevents the prototype from being changed. The method returns the passed object.",18,[[["object"]],["object"]]],[11,"has_own_property","","The `hasOwnProperty()` method returns a boolean indicating whether the object has the specified property as its own property (as opposed to inheriting it).",18,[[["self"],["jsvalue"]],["bool"]]],[11,"is_extensible","","The `Object.isExtensible()` method determines if an object is extensible (whether it can have new properties added to it).",18,[[["object"]],["bool"]]],[11,"is_frozen","","The `Object.isFrozen()` determines if an object is frozen.",18,[[["object"]],["bool"]]],[11,"is_sealed","","The `Object.isSealed()` method determines if an object is sealed.",18,[[["object"]],["bool"]]],[11,"is_prototype_of","","The `isPrototypeOf()` method checks if an object exists in another object's prototype chain.",18,[[["self"],["jsvalue"]],["bool"]]],[11,"keys","","The `Object.keys()` method returns an array of a given object's property names, in the same order as we get with a normal loop.",18,[[["object"]],["array"]]],[11,"new","","The [`Object`] constructor creates an object wrapper.",18,[[],["object"]]],[11,"prevent_extensions","","The `Object.preventExtensions()` method prevents new properties from ever being added to an object (i.e. prevents future extensions to the object).",18,[[["object"]]]],[11,"property_is_enumerable","","The `propertyIsEnumerable()` method returns a Boolean indicating whether the specified property is enumerable.",18,[[["self"],["jsvalue"]],["bool"]]],[11,"seal","","The `Object.seal()` method seals an object, preventing new properties from being added to it and marking all existing properties as non-configurable.  Values of present properties can still be changed as long as they are writable.",18,[[["object"]],["object"]]],[11,"set_prototype_of","","The `Object.setPrototypeOf()` method sets the prototype (i.e., the internal `[[Prototype]]` property) of a specified object to another object or `null`.",18,[[["object"],["object"]],["object"]]],[11,"to_locale_string","","The `toLocaleString()` method returns a string representing the object. This method is meant to be overridden by derived objects for locale-specific purposes.",18,[[["self"]],["jsstring"]]],[11,"to_string","","The `toString()` method returns a string representing the object.",18,[[["self"]],["jsstring"]]],[11,"value_of","","The `valueOf()` method returns the primitive value of the specified object.",18,[[["self"]],["object"]]],[11,"values","","The `Object.values()` method returns an array of a given object's own enumerable property values, in the same order as that provided by a `for...in` loop (the difference being that a for-in loop enumerates properties in the prototype chain as well).",18,[[["object"]],["array"]]],[11,"try_from","","Returns the `Object` value of this JS value if it's an instance of an object.",18,[[["jsvalue"]],["option",["object"]]]],[11,"describe","","",19,[[]]],[11,"into_abi","","",19,N],[11,"none","","",19,N],[11,"from_abi","","",19,N],[11,"is_none","","",19,N],[11,"ref_from_abi","","",19,N],[11,"from","","",19,[[["jsvalue"]],["proxy"]]],[11,"new","","The [`Proxy`] object is used to define custom behavior for fundamental operations (e.g. property lookup, assignment, enumeration, function invocation, etc).",19,[[["jsvalue"],["object"]],["proxy"]]],[11,"revocable","","The `Proxy.revocable()` method is used to create a revocable [`Proxy`] object.",19,[[["jsvalue"],["object"]],["object"]]],[11,"describe","","",20,[[]]],[11,"into_abi","","",20,N],[11,"none","","",20,N],[11,"from_abi","","",20,N],[11,"is_none","","",20,N],[11,"ref_from_abi","","",20,N],[11,"from","","",20,[[["jsvalue"]],["reflect"]]],[11,"apply","","The static `Reflect.apply()` method calls a target function with arguments as specified.",20,[[["function"],["jsvalue"],["array"]],["jsvalue"]]],[11,"construct","","The static `Reflect.construct()` method acts like the new operator, but as a function.  It is equivalent to calling `new target(...args)`. It gives also the added option to specify a different prototype.",20,[[["function"],["array"]],["jsvalue"]]],[11,"construct_with_new_target","","",20,[[["function"],["array"],["function"]],["jsvalue"]]],[11,"define_property","","The static `Reflect.defineProperty()` method is like `Object.defineProperty()` but returns a `Boolean`.",20,[[["object"],["jsvalue"],["object"]],["bool"]]],[11,"delete_property","","The static `Reflect.deleteProperty()` method allows to delete properties.  It is like the `delete` operator as a function.",20,[[["object"],["jsvalue"]],["bool"]]],[11,"get","","The static `Reflect.get()` method works like getting a property from an object (`target[propertyKey]`) as a function.",20,[[["object"],["jsvalue"]],["jsvalue"]]],[11,"get_own_property_descriptor","","The static `Reflect.getOwnPropertyDescriptor()` method is similar to `Object.getOwnPropertyDescriptor()`. It returns a property descriptor of the given property if it exists on the object, `undefined` otherwise.",20,[[["object"],["jsvalue"]],["jsvalue"]]],[11,"get_prototype_of","","The static `Reflect.getPrototypeOf()` method is almost the same method as `Object.getPrototypeOf()`. It returns the prototype (i.e. the value of the internal `[[Prototype]]` property) of the specified object.",20,[[["object"]],["object"]]],[11,"has","","The static `Reflect.has()` method works like the in operator as a function.",20,[[["object"],["jsvalue"]],["bool"]]],[11,"is_extensible","","The static `Reflect.isExtensible()` method determines if an object is extensible (whether it can have new properties added to it). It is similar to `Object.isExtensible()`, but with some differences.",20,[[["object"]],["bool"]]],[11,"own_keys","","The static `Reflect.ownKeys()` method returns an array of the target object's own property keys.",20,[[["object"]],["array"]]],[11,"prevent_extensions","","The static `Reflect.preventExtensions()` method prevents new properties from ever being added to an object (i.e. prevents future extensions to the object). It is similar to `Object.preventExtensions()`, but with some differences.",20,[[["object"]],["bool"]]],[11,"set","","The static `Reflect.set()` method works like setting a property on an object.",20,[[["object"],["jsvalue"],["jsvalue"]],["bool"]]],[11,"set_with_receiver","","",20,[[["object"],["jsvalue"],["jsvalue"],["object"]],["bool"]]],[11,"set_prototype_of","","The static `Reflect.setPrototypeOf()` method is the same method as `Object.setPrototypeOf()`. It sets the prototype (i.e., the internal `[[Prototype]]` property) of a specified object to another object or to null.",20,[[["object"],["jsvalue"]],["bool"]]],[11,"describe","","",21,[[]]],[11,"into_abi","","",21,N],[11,"none","","",21,N],[11,"from_abi","","",21,N],[11,"is_none","","",21,N],[11,"ref_from_abi","","",21,N],[11,"from","","",21,[[["jsvalue"]],["set"]]],[11,"add","","The `add()` method appends a new element with a specified value to the end of a [`Set`] object.",21,[[["self"],["jsvalue"]],["set"]]],[11,"clear","","The `clear()` method removes all elements from a [`Set`] object.",21,[[["self"]]]],[11,"delete","","The `delete()` method removes the specified element from a [`Set`] object.",21,[[["self"],["jsvalue"]],["bool"]]],[11,"for_each","","The forEach() method executes a provided function once for each value in the Set object, in insertion order.",21,[[["self"],["fnmut"]]]],[11,"has","","The `has()` method returns a boolean indicating whether an element with the specified value exists in a [`Set`] object or not.",21,[[["self"],["jsvalue"]],["bool"]]],[11,"new","","The [`Set`] object lets you store unique values of any type, whether primitive values or object references.",21,[[["jsvalue"]],["set"]]],[11,"size","","The size accessor property returns the number of elements in a [`Set`] object.",21,[[["self"]],["u32"]]],[11,"describe","","",22,[[]]],[11,"into_abi","","",22,N],[11,"none","","",22,N],[11,"from_abi","","",22,N],[11,"is_none","","",22,N],[11,"ref_from_abi","","",22,N],[11,"from","","",22,[[["jsvalue"]],["setiterator"]]],[11,"entries","","The `entries()` method returns a new Iterator object that contains an array of [value, value] for each element in the Set object, in insertion order. For Set objects there is no key like in Map objects. However, to keep the API similar to the Map object, each entry has the same value for its key and value here, so that an array [value, value] is returned.",21,[[["self"]],["setiterator"]]],[11,"keys","","The `keys()` method is an alias for this method (for similarity with Map objects); it behaves exactly the same and returns values of Set elements.",21,[[["self"]],["setiterator"]]],[11,"values","","The `values()` method returns a new Iterator object that contains the values for each element in the Set object in insertion order.",21,[[["self"]],["setiterator"]]],[11,"describe","","",23,[[]]],[11,"into_abi","","",23,N],[11,"none","","",23,N],[11,"from_abi","","",23,N],[11,"is_none","","",23,N],[11,"ref_from_abi","","",23,N],[11,"from","","",23,[[["jsvalue"]],["uint8array"]]],[11,"new","","The `Uint8Array()` constructor creates an array of unsigned 8-bit integers.",23,[[["jsvalue"]],["uint8array"]]],[11,"fill","","The fill() method fills all the elements of an array from a start index to an end index with a static value. The end index is not included.",23,[[["self"],["u8"],["u32"],["u32"]],["uint8array"]]],[11,"buffer","","The `buffer` accessor property represents the `ArrayBuffer` referenced by a `TypedArray` at construction time.",23,[[["self"]],["arraybuffer"]]],[11,"subarray","","The `subarray()` method stores multiple values in the typed array, reading input values from a specified array.",23,[[["self"],["u32"],["u32"]],["uint8array"]]],[11,"for_each","","The `forEach()` method executes a provided function once per array element. This method has the same algorithm as `Array.prototype.forEach()`. `TypedArray` is one of the typed array types here.",23,[[["self"],["fnmut"]]]],[11,"length","","The `length` accessor property represents the length (in elements) of a typed array.",23,[[["self"]],["u32"]]],[11,"byte_length","","The `byteLength` accessor property represents the length (in bytes) of a typed array.",23,[[["self"]],["u32"]]],[11,"byte_offset","","The `byteOffset` accessor property represents the offset (in bytes) of a typed array from the start of its `ArrayBuffer`.",23,[[["self"]],["u32"]]],[11,"describe","","",24,[[]]],[11,"into_abi","","",24,N],[11,"none","","",24,N],[11,"from_abi","","",24,N],[11,"is_none","","",24,N],[11,"ref_from_abi","","",24,N],[11,"from","","",24,[[["jsvalue"]],["uint8clampedarray"]]],[11,"new","","The `Uint8ClampedArray()` constructor creates an array of unsigned 8-bit integers clamped to 0-255; if you specified a value that is out of the range of [0,255], 0 or 255 will be set instead.",24,[[["jsvalue"]],["uint8clampedarray"]]],[11,"fill","","The fill() method fills all the elements of an array from a start index to an end index with a static value. The end index is not included.",24,[[["self"],["u8"],["u32"],["u32"]],["uint8clampedarray"]]],[11,"buffer","","The `buffer` accessor property represents the `ArrayBuffer` referenced by a `TypedArray` at construction time.",24,[[["self"]],["arraybuffer"]]],[11,"subarray","","The `subarray()` method stores multiple values in the typed array, reading input values from a specified array.",24,[[["self"],["u32"],["u32"]],["uint8clampedarray"]]],[11,"for_each","","The `forEach()` method executes a provided function once per array element. This method has the same algorithm as `Array.prototype.forEach()`. `TypedArray` is one of the typed array types here.",24,[[["self"],["fnmut"]]]],[11,"length","","The `length` accessor property represents the length (in elements) of a typed array.",24,[[["self"]],["u32"]]],[11,"byte_length","","The `byteLength` accessor property represents the length (in bytes) of a typed array.",24,[[["self"]],["u32"]]],[11,"byte_offset","","The `byteOffset` accessor property represents the offset (in bytes) of a typed array from the start of its `ArrayBuffer`.",24,[[["self"]],["u32"]]],[11,"describe","","",25,[[]]],[11,"into_abi","","",25,N],[11,"none","","",25,N],[11,"from_abi","","",25,N],[11,"is_none","","",25,N],[11,"ref_from_abi","","",25,N],[11,"from","","",25,[[["jsvalue"]],["uint16array"]]],[11,"new","","The `Uint16Array()` constructor creates an array of unsigned 16-bit integers.",25,[[["jsvalue"]],["uint16array"]]],[11,"fill","","The fill() method fills all the elements of an array from a start index to an end index with a static value. The end index is not included.",25,[[["self"],["u16"],["u32"],["u32"]],["uint16array"]]],[11,"buffer","","The `buffer` accessor property represents the `ArrayBuffer` referenced by a `TypedArray` at construction time.",25,[[["self"]],["arraybuffer"]]],[11,"subarray","","The `subarray()` method stores multiple values in the typed array, reading input values from a specified array.",25,[[["self"],["u32"],["u32"]],["uint16array"]]],[11,"for_each","","The `forEach()` method executes a provided function once per array element. This method has the same algorithm as `Array.prototype.forEach()`. `TypedArray` is one of the typed array types here.",25,[[["self"],["fnmut"]]]],[11,"length","","The `length` accessor property represents the length (in elements) of a typed array.",25,[[["self"]],["u32"]]],[11,"byte_length","","The `byteLength` accessor property represents the length (in bytes) of a typed array.",25,[[["self"]],["u32"]]],[11,"byte_offset","","The `byteOffset` accessor property represents the offset (in bytes) of a typed array from the start of its `ArrayBuffer`.",25,[[["self"]],["u32"]]],[11,"describe","","",26,[[]]],[11,"into_abi","","",26,N],[11,"none","","",26,N],[11,"from_abi","","",26,N],[11,"is_none","","",26,N],[11,"ref_from_abi","","",26,N],[11,"from","","",26,[[["jsvalue"]],["uint32array"]]],[11,"new","","The `Uint32Array()` constructor creates an array of unsigned 32-bit integers.",26,[[["jsvalue"]],["uint32array"]]],[11,"fill","","The fill() method fills all the elements of an array from a start index to an end index with a static value. The end index is not included.",26,[[["self"],["u32"],["u32"],["u32"]],["uint32array"]]],[11,"buffer","","The `buffer` accessor property represents the `ArrayBuffer` referenced by a `TypedArray` at construction time.",26,[[["self"]],["arraybuffer"]]],[11,"subarray","","The `subarray()` method stores multiple values in the typed array, reading input values from a specified array.",26,[[["self"],["u32"],["u32"]],["uint32array"]]],[11,"for_each","","The `forEach()` method executes a provided function once per array element. This method has the same algorithm as `Array.prototype.forEach()`. `TypedArray` is one of the typed array types here.",26,[[["self"],["fnmut"]]]],[11,"length","","The `length` accessor property represents the length (in elements) of a typed array.",26,[[["self"]],["u32"]]],[11,"byte_length","","The `byteLength` accessor property represents the length (in bytes) of a typed array.",26,[[["self"]],["u32"]]],[11,"byte_offset","","The `byteOffset` accessor property represents the offset (in bytes) of a typed array from the start of its `ArrayBuffer`.",26,[[["self"]],["u32"]]],[11,"describe","","",27,[[]]],[11,"into_abi","","",27,N],[11,"none","","",27,N],[11,"from_abi","","",27,N],[11,"is_none","","",27,N],[11,"ref_from_abi","","",27,N],[11,"from","","",27,[[["jsvalue"]],["weakmap"]]],[11,"new","","The [`WeakMap`] object is a collection of key/value pairs in which the keys are weakly referenced.  The keys must be objects and the values can be arbitrary values.",27,[[],["weakmap"]]],[11,"set","","The `set()` method sets the value for the key in the [`WeakMap`] object. Returns the [`WeakMap`] object.",27,[[["self"],["object"],["jsvalue"]],["weakmap"]]],[11,"get","","The get() method returns a specified by key element from a [`WeakMap`] object.",27,[[["self"],["object"]],["jsvalue"]]],[11,"has","","The `has()` method returns a boolean indicating whether an element with the specified key exists in the [`WeakMap`] object or not.",27,[[["self"],["object"]],["bool"]]],[11,"delete","","The `delete()` method removes the specified element from a [`WeakMap`] object.",27,[[["self"],["object"]],["bool"]]],[11,"describe","","",28,[[]]],[11,"into_abi","","",28,N],[11,"none","","",28,N],[11,"from_abi","","",28,N],[11,"is_none","","",28,N],[11,"ref_from_abi","","",28,N],[11,"from","","",28,[[["jsvalue"]],["weakset"]]],[11,"new","","The `WeakSet` object lets you store weakly held objects in a collection.",28,[[],["weakset"]]],[11,"has","","The `has()` method returns a boolean indicating whether an object exists in a WeakSet or not.",28,[[["self"],["object"]],["bool"]]],[11,"add","","The `add()` method appends a new object to the end of a WeakSet object.",28,[[["self"],["object"]],["weakset"]]],[11,"delete","","The `delete()` method removes the specified element from a WeakSet object.",28,[[["self"],["object"]],["bool"]]],[11,"describe","","",29,[[]]],[11,"into_abi","","",29,N],[11,"none","","",29,N],[11,"from_abi","","",29,N],[11,"is_none","","",29,N],[11,"ref_from_abi","","",29,N],[11,"from","","",29,[[["jsvalue"]],["webassembly"]]],[11,"validate","","The `WebAssembly.validate()` function validates a given typed array of WebAssembly binary code, returning whether the bytes form a valid wasm module (`true`) or not (`false`).",29,[[["jsvalue"]],["result",["bool","jsvalue"]]]],[11,"describe","","",30,[[]]],[11,"into_abi","","",30,N],[11,"none","","",30,N],[11,"from_abi","","",30,N],[11,"is_none","","",30,N],[11,"ref_from_abi","","",30,N],[11,"from","","",30,[[["jsvalue"]],["jsstring"]]],[11,"length","","The length property of a String object indicates the length of a string, in UTF-16 code units.",30,[[["self"]],["u32"]]],[11,"char_at","","The String object's `charAt()` method returns a new string consisting of the single UTF-16 code unit located at the specified offset into the string.",30,[[["self"],["u32"]],["jsstring"]]],[11,"char_code_at","","The `charCodeAt()` method returns an integer between 0 and 65535 representing the UTF-16 code unit at the given index (the UTF-16 code unit matches the Unicode code point for code points representable in a single UTF-16 code unit, but might also be the first code unit of a surrogate pair for code points not representable in a single UTF-16 code unit, e.g. Unicode code points > 0x10000).  If you want the entire code point value, use `codePointAt()`.",30,[[["self"],["u32"]],["f64"]]],[11,"code_point_at","","The `codePointAt()` method returns a non-negative integer that is the Unicode code point value.",30,[[["self"],["u32"]],["jsvalue"]]],[11,"concat","","The `concat()` method concatenates the string arguments to the calling string and returns a new string.",30,[[["self"],["jsvalue"]],["jsstring"]]],[11,"ends_with","","The endsWith() method determines whether a string ends with the characters of a specified string, returning true or false as appropriate.",30,[[["self"],["jsstring"],["i32"]],["bool"]]],[11,"includes","","The `includes()` method determines whether one string may be found within another string, returning true or false as appropriate.",30,[[["self"],["jsstring"],["i32"]],["bool"]]],[11,"index_of","","The `indexOf()` method returns the index within the calling String object of the first occurrence of the specified value, starting the search at fromIndex.  Returns -1 if the value is not found.",30,[[["self"],["jsstring"],["i32"]],["i32"]]],[11,"last_index_of","","The `lastIndexOf()` method returns the index within the calling String object of the last occurrence of the specified value, searching backwards from fromIndex.  Returns -1 if the value is not found.",30,[[["self"],["jsstring"],["i32"]],["i32"]]],[11,"normalize","","The normalize() method returns the Unicode Normalization Form of a given string (if the value isn't a string, it will be converted to one first).",30,[[["self"],["jsstring"]],["jsstring"]]],[11,"pad_end","","The `padEnd()` method pads the current string with a given string (repeated, if needed) so that the resulting string reaches a given length. The padding is applied from the end (right) of the current string.",30,[[["self"],["u32"],["jsstring"]],["jsstring"]]],[11,"pad_start","","The `padStart()` method pads the current string with another string (repeated, if needed) so that the resulting string reaches the given length. The padding is applied from the start (left) of the current string.",30,[[["self"],["u32"],["jsstring"]],["jsstring"]]],[11,"repeat","","The repeat() method constructs and returns a new string which contains the specified number of copies of the string on which it was called, concatenated together.",30,[[["self"],["i32"]],["jsstring"]]],[11,"slice","","The `slice()` method extracts a section of a string and returns it as a new string, without modifying the original string.",30,[[["self"],["u32"],["u32"]],["jsstring"]]],[11,"starts_with","","The `startsWith()` method determines whether a string begins with the characters of a specified string, returning true or false as appropriate.",30,[[["self"],["jsstring"],["u32"]],["bool"]]],[11,"substring","","The `substring()` method returns the part of the string between the start and end indexes, or to the end of the string.",30,[[["self"],["u32"],["u32"]],["jsstring"]]],[11,"substr","","The `substr()` method returns the part of a string between the start index and a number of characters after it.",30,[[["self"],["i32"],["i32"]],["jsstring"]]],[11,"to_locale_lower_case","","The toLocaleLowerCase() method returns the calling string value converted to lower case, according to any locale-specific case mappings.",30,[[["self"],["option",["string"]]],["jsstring"]]],[11,"to_locale_upper_case","","The toLocaleUpperCase() method returns the calling string value converted to upper case, according to any locale-specific case mappings.",30,[[["self"],["option",["string"]]],["jsstring"]]],[11,"to_lower_case","","The `toLowerCase()` method returns the calling string value converted to lower case.",30,[[["self"]],["jsstring"]]],[11,"to_string","","The `toString()` method returns a string representing the specified object.",30,[[["self"]],["jsstring"]]],[11,"to_upper_case","","The `toUpperCase()` method returns the calling string value converted to uppercase (the value will be converted to a string if it isn't one).",30,[[["self"]],["jsstring"]]],[11,"trim","","The `trim()` method removes whitespace from both ends of a string. Whitespace in this context is all the whitespace characters (space, tab, no-break space, etc.) and all the line terminator characters (LF, CR, etc.).",30,[[["self"]],["jsstring"]]],[11,"trim_end","","The `trimEnd()` method removes whitespace from the end of a string. `trimRight()` is an alias of this method.",30,[[["self"]],["jsstring"]]],[11,"trim_right","","The `trimEnd()` method removes whitespace from the end of a string. `trimRight()` is an alias of this method.",30,[[["self"]],["jsstring"]]],[11,"trim_start","","The `trimStart()` method removes whitespace from the beginning of a string.  `trimLeft()` is an alias of this method.",30,[[["self"]],["jsstring"]]],[11,"trim_left","","The `trimStart()` method removes whitespace from the beginning of a string.  `trimLeft()` is an alias of this method.",30,[[["self"]],["jsstring"]]],[11,"value_of","","The `valueOf()` method returns the primitive value of a `String` object.",30,[[["self"]],["jsstring"]]],[11,"try_from","","Returns the `JsString` value of this JS value if it's an instance of a string.",30,[[["jsvalue"]],["option",["jsstring"]]]],[11,"eq","","",30,[[["self"],["str"]],["bool"]]],[11,"eq","","",30,[[["self"],["str"]],["bool"]]],[11,"eq","","",30,[[["self"],["string"]],["bool"]]],[11,"eq","","",30,[[["self"],["string"]],["bool"]]],[11,"from","","",30,[[["str"]],["self"]]],[11,"from","","",30,[[["string"]],["self"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"describe","","",31,[[]]],[11,"into_abi","","",31,N],[11,"none","","",31,N],[11,"from_abi","","",31,N],[11,"is_none","","",31,N],[11,"ref_from_abi","","",31,N],[11,"from","","",31,[[["jsvalue"]],["symbol"]]],[11,"has_instance","","The `Symbol.hasInstance` well-known symbol is used to determine if a constructor object recognizes an object as its instance. The `instanceof` operator's behavior can be customized by this symbol.",31,[[],["symbol"]]],[11,"is_concat_spreadable","","The `Symbol.isConcatSpreadable` well-known symbol is used to configure if an object should be flattened to its array elements when using the `Array.prototype.concat()` method.",31,[[],["symbol"]]],[11,"iterator","","The `Symbol.iterator` well-known symbol specifies the default iterator for an object.  Used by `for...of`.",31,[[],["symbol"]]],[11,"match_","","The `Symbol.match` well-known symbol specifies the matching of a regular expression against a string. This function is called by the `String.prototype.match()` method.",31,[[],["symbol"]]],[11,"replace","","The `Symbol.replace` well-known symbol specifies the method that replaces matched substrings of a string.  This function is called by the `String.prototype.replace()` method.",31,[[],["symbol"]]],[11,"search","","The `Symbol.search` well-known symbol specifies the method that returns the index within a string that matches the regular expression.  This function is called by the `String.prototype.search()` method.",31,[[],["symbol"]]],[11,"species","","The well-known symbol `Symbol.species` specifies a function-valued property that the constructor function uses to create derived objects.",31,[[],["symbol"]]],[11,"split","","The `Symbol.split` well-known symbol specifies the method that splits a string at the indices that match a regular expression.  This function is called by the `String.prototype.split()` method.",31,[[],["symbol"]]],[11,"to_primitive","","The `Symbol.toPrimitive` is a symbol that specifies a function valued property that is called to convert an object to a corresponding primitive value.",31,[[],["symbol"]]],[11,"to_string_tag","","The `Symbol.toStringTag` well-known symbol is a string valued property that is used in the creation of the default string description of an object.  It is accessed internally by the `Object.prototype.toString()` method.",31,[[],["symbol"]]],[11,"for_","","The Symbol.for(key) method searches for existing symbols in a runtime-wide symbol registry with the given key and returns it if found. Otherwise a new symbol gets created in the global symbol registry with this key.",31,[[["jsstring"]],["symbol"]]],[11,"key_for","","The Symbol.keyFor(sym) method retrieves a shared symbol key from the global symbol registry for the given symbol.",31,[[["symbol"]],["jsvalue"]]],[11,"to_string","","The toString() method returns a string representing the specified Symbol object.",31,[[["self"]],["jsstring"]]],[11,"value_of","","The valueOf() method returns the primitive value of a Symbol object.",31,[[["self"]],["symbol"]]],[11,"describe","","",32,[[]]],[11,"into_abi","","",32,N],[11,"none","","",32,N],[11,"from_abi","","",32,N],[11,"is_none","","",32,N],[11,"ref_from_abi","","",32,N],[11,"from","","",32,[[["jsvalue"]],["intl"]]],[11,"get_canonical_locales","","The `Intl.getCanonicalLocales()` method returns an array containing the canonical locale names. Duplicates will be omitted and elements will be validated as structurally valid language tags.",32,[[["jsvalue"]],["array"]]]],"paths":[[3,"Array"],[3,"ArrayBuffer"],[3,"ArrayIterator"],[3,"Boolean"],[3,"DataView"],[3,"Error"],[3,"Float32Array"],[3,"Float64Array"],[3,"Function"],[3,"Generator"],[3,"Int8Array"],[3,"Int16Array"],[3,"Int32Array"],[3,"Map"],[3,"MapIterator"],[3,"Math"],[3,"Number"],[3,"Date"],[3,"Object"],[3,"Proxy"],[3,"Reflect"],[3,"Set"],[3,"SetIterator"],[3,"Uint8Array"],[3,"Uint8ClampedArray"],[3,"Uint16Array"],[3,"Uint32Array"],[3,"WeakMap"],[3,"WeakSet"],[3,"WebAssembly"],[3,"JsString"],[3,"Symbol"],[3,"Intl"]]};
searchIndex["wasm_bindgen"]={"doc":"Runtime support for the `wasm-bindgen` tool","items":[[3,"JsValue","wasm_bindgen","Representation of an object owned by JS.",N,N],[3,"JsStatic","","Wrapper type for imported statics.",N,N],[5,"throw","","Throws a JS exception.",N,N],[0,"prelude","","A module which is typically glob imported from:",N,N],[0,"convert","","This is mostly an internal module, no stability guarantees are provided. Use at your own risk.",N,N],[3,"WasmSlice","wasm_bindgen::convert","",N,N],[12,"ptr","","",0,N],[12,"len","","",0,N],[3,"GlobalStack","","",N,N],[11,"into_abi","wasm_bindgen","",1,[[["self"],["stack"]],["u32"]]],[11,"from_abi","","",1,[[["u32"],["stack"]],["jsvalue"]]],[11,"ref_from_abi","","",1,N],[8,"IntoWasmAbi","wasm_bindgen::convert","A trait for anything that can be converted into a type that can cross the wasm ABI directly, eg `u32` or `f64`.",N,N],[16,"Abi","","The wasm ABI type that this converts into when crossing the ABI boundary.",2,N],[10,"into_abi","","Convert `self` into `Self::Abi` so that it can be sent across the wasm ABI boundary.",2,N],[8,"FromWasmAbi","","A trait for anything that can be recovered by-value from the wasm ABI boundary, eg a Rust `u8` can be recovered from the wasm ABI `u32` type.",N,N],[16,"Abi","","The wasm ABI type that this converts from when coming back out from the ABI boundary.",3,N],[10,"from_abi","","Recover a `Self` from `Self::Abi`.",3,N],[8,"RefFromWasmAbi","","A trait for anything that can be recovered as some sort of shared reference from the wasm ABI boundary.",N,N],[16,"Abi","","The wasm ABI type references to `Self` are recovered from.",4,N],[16,"Anchor","","The type that holds the reference to `Self` for the duration of the invocation of the function that has an `&Self` parameter. This is required to ensure that the lifetimes don't persist beyond one function call, and so that they remain anonymous.",4,N],[10,"ref_from_abi","","Recover a `Self::Anchor` from `Self::Abi`.",4,N],[8,"RefMutFromWasmAbi","","Dual of the `RefFromWasmAbi` trait, except for mutable references.",N,N],[16,"Abi","","Same as `RefFromWasmAbi::Abi`",5,N],[16,"Anchor","","Same as `RefFromWasmAbi::Anchor`",5,N],[10,"ref_mut_from_abi","","Same as `RefFromWasmAbi::ref_from_abi`",5,N],[8,"OptionIntoWasmAbi","","Indicates that this type can be passed to JS as `Option<Self>`.",N,N],[10,"none","","Returns an ABI instance indicating \"none\", which JS will interpret as the `None` branch of this option.",6,N],[8,"OptionFromWasmAbi","","Indicates that this type can be received from JS as `Option<Self>`.",N,N],[10,"is_none","","Tests whether the argument is a \"none\" instance. If so it will be deserialized as `None`, and otherwise it will be passed to `FromWasmAbi`.",7,N],[8,"Stack","","",N,N],[10,"push","","",8,[[["self"],["u32"]]]],[8,"WasmAbi","","An unsafe trait which represents types that are ABI-safe to pass via wasm arguments.",N,N],[11,"new","","",9,[[],["globalstack"]]],[11,"push","","",9,[[["self"],["u32"]]]],[0,"closure","wasm_bindgen","Support for long-lived closures in `wasm-bindgen`",N,N],[3,"Closure","wasm_bindgen::closure","A handle to both a closure in Rust as well as JS closure which will invoke the Rust closure.",N,N],[11,"new","","Creates a new instance of `Closure` from the provided Rust closure.",10,[[["f"]],["closure"]]],[11,"wrap","","A mostly internal function to wrap a boxed closure inside a `Closure` type.",10,[[["box"]],["closure"]]],[11,"forget","","Leaks this `Closure` to ensure it remains valid for the duration of the entire program.",10,[[["self"]]]],[11,"drop","","",10,[[["self"]]]],[18,"NULL","wasm_bindgen","The `null` JS value constant.",1,N],[18,"UNDEFINED","","The `undefined` JS value constant.",1,N],[18,"TRUE","","The `true` JS value constant.",1,N],[18,"FALSE","","The `false` JS value constant.",1,N],[11,"from_str","","Creates a new JS value which is a string.",1,[[["str"]],["jsvalue"]]],[11,"from_f64","","Creates a new JS value which is a number.",1,[[["f64"]],["jsvalue"]]],[11,"from_bool","","Creates a new JS value which is a boolean.",1,[[["bool"]],["jsvalue"]]],[11,"undefined","","Creates a new JS value representing `undefined`.",1,[[],["jsvalue"]]],[11,"null","","Creates a new JS value representing `null`.",1,[[],["jsvalue"]]],[11,"symbol","","Creates a new JS symbol with the optional description specified.",1,[[["option",["str"]]],["jsvalue"]]],[11,"as_f64","","Returns the `f64` value of this JS value if it's an instance of a number.",1,[[["self"]],["option",["f64"]]]],[11,"is_string","","Tests whether this JS value is a JS string.",1,[[["self"]],["bool"]]],[11,"as_string","","If this JS value is a string value, this function copies the JS string value into wasm linear memory, encoded as UTF-8, and returns it as a Rust `String`.",1,[[["self"]],["option",["string"]]]],[11,"as_bool","","Returns the `bool` value of this JS value if it's an instance of a boolean.",1,[[["self"]],["option",["bool"]]]],[11,"is_null","","Tests whether this JS value is `null`",1,[[["self"]],["bool"]]],[11,"is_undefined","","Tests whether this JS value is `undefined`",1,[[["self"]],["bool"]]],[11,"is_symbol","","Tests whether the type of this JS value is `symbol`",1,[[["self"]],["bool"]]],[11,"is_object","","Tests whether `typeof self == \"object\" && self !== null`.",1,[[["self"]],["bool"]]],[11,"is_function","","Tests whether the type of this JS value is `function`.",1,[[["self"]],["bool"]]],[11,"eq","","",1,[[["self"],["jsvalue"]],["bool"]]],[11,"eq","","",1,[[["self"],["bool"]],["bool"]]],[11,"eq","","",1,[[["self"],["str"]],["bool"]]],[11,"eq","","",1,[[["self"],["str"]],["bool"]]],[11,"eq","","",1,[[["self"],["string"]],["bool"]]],[11,"eq","","",1,[[["self"],["string"]],["bool"]]],[11,"from","","",1,[[["str"]],["jsvalue"]]],[11,"from","","",1,[[["string"]],["jsvalue"]]],[11,"from","","",1,[[["string"]],["jsvalue"]]],[11,"from","","",1,[[["bool"]],["jsvalue"]]],[11,"eq","","",1,[[["self"],["i8"]],["bool"]]],[11,"from","","",1,[[["i8"]],["jsvalue"]]],[11,"eq","","",1,[[["self"],["u8"]],["bool"]]],[11,"from","","",1,[[["u8"]],["jsvalue"]]],[11,"eq","","",1,[[["self"],["i16"]],["bool"]]],[11,"from","","",1,[[["i16"]],["jsvalue"]]],[11,"eq","","",1,[[["self"],["u16"]],["bool"]]],[11,"from","","",1,[[["u16"]],["jsvalue"]]],[11,"eq","","",1,[[["self"],["i32"]],["bool"]]],[11,"from","","",1,[[["i32"]],["jsvalue"]]],[11,"eq","","",1,[[["self"],["u32"]],["bool"]]],[11,"from","","",1,[[["u32"]],["jsvalue"]]],[11,"eq","","",1,[[["self"],["f32"]],["bool"]]],[11,"from","","",1,[[["f32"]],["jsvalue"]]],[11,"eq","","",1,[[["self"],["f64"]],["bool"]]],[11,"from","","",1,[[["f64"]],["jsvalue"]]],[11,"clone","","",1,[[["self"]],["jsvalue"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"drop","","",1,[[["self"]]]],[11,"deref","","",11,[[["self"]],["t"]]]],"paths":[[3,"WasmSlice"],[3,"JsValue"],[8,"IntoWasmAbi"],[8,"FromWasmAbi"],[8,"RefFromWasmAbi"],[8,"RefMutFromWasmAbi"],[8,"OptionIntoWasmAbi"],[8,"OptionFromWasmAbi"],[8,"Stack"],[3,"GlobalStack"],[3,"Closure"],[3,"JsStatic"]]};
searchIndex["web_sys"]={"doc":"","items":[[3,"Element","web_sys","",N,N],[3,"Event","","",N,N],[3,"Headers","","",N,N],[3,"Response","","",N,N],[4,"ScrollLogicalPosition","","",N,N],[13,"Start","","",0,N],[13,"Center","","",0,N],[13,"End","","",0,N],[13,"Nearest","","",0,N],[4,"HeadersGuardEnum","","",N,N],[13,"None","","",1,N],[13,"Request","","",1,N],[13,"RequestNoCors","","",1,N],[13,"Response","","",1,N],[13,"Immutable","","",1,N],[4,"ResponseType","","",N,N],[13,"Basic","","",2,N],[13,"Cors","","",2,N],[13,"Default","","",2,N],[13,"Error","","",2,N],[13,"Opaque","","",2,N],[13,"Opaqueredirect","","",2,N],[4,"StorageType","","",N,N],[13,"Persistent","","",3,N],[13,"Temporary","","",3,N],[13,"Default","","",3,N],[11,"describe","","",4,[[]]],[11,"into_abi","","",4,N],[11,"none","","",4,N],[11,"from_abi","","",4,N],[11,"is_none","","",4,N],[11,"ref_from_abi","","",4,N],[11,"from","","",4,[[["jsvalue"]],["element"]]],[11,"local_name","","",4,[[["self"]],["string"]]],[11,"tag_name","","",4,[[["self"]],["string"]]],[11,"id","","",4,[[["self"]],["string"]]],[11,"set_id","","",4,[[["self"],["str"]]]],[11,"class_name","","",4,[[["self"]],["string"]]],[11,"set_class_name","","",4,[[["self"],["str"]]]],[11,"toggle_attribute","","",4,[[["self"],["str"],["bool"]],["result",["bool","jsvalue"]]]],[11,"set_attribute","","",4,[[["self"],["str"],["str"]],["result",["jsvalue"]]]],[11,"remove_attribute","","",4,[[["self"],["str"]],["result",["jsvalue"]]]],[11,"has_attribute","","",4,[[["self"],["str"]],["bool"]]],[11,"has_attributes","","",4,[[["self"]],["bool"]]],[11,"closest","","",4,[[["self"],["str"]],["result",["option","jsvalue"]]]],[11,"matches","","",4,[[["self"],["str"]],["result",["bool","jsvalue"]]]],[11,"webkit_matches_selector","","",4,[[["self"],["str"]],["result",["bool","jsvalue"]]]],[11,"insert_adjacent_element","","",4,[[["self"],["str"],["element"]],["result",["option","jsvalue"]]]],[11,"insert_adjacent_text","","",4,[[["self"],["str"],["str"]],["result",["jsvalue"]]]],[11,"set_pointer_capture","","",4,[[["self"],["i32"]],["result",["jsvalue"]]]],[11,"release_pointer_capture","","",4,[[["self"],["i32"]],["result",["jsvalue"]]]],[11,"has_pointer_capture","","",4,[[["self"],["i32"]],["bool"]]],[11,"set_capture","","",4,[[["self"],["bool"]]]],[11,"release_capture","","",4,[[["self"]]]],[11,"clone","","",0,[[["self"]],["scrolllogicalposition"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"from_js_value","","",0,[[["jsvalue"]],["option",["scrolllogicalposition"]]]],[11,"describe","","",0,[[]]],[11,"into_abi","","",0,N],[11,"from_abi","","",0,N],[11,"scroll_top","","",4,[[["self"]],["i32"]]],[11,"set_scroll_top","","",4,[[["self"],["i32"]]]],[11,"scroll_left","","",4,[[["self"]],["i32"]]],[11,"set_scroll_left","","",4,[[["self"],["i32"]]]],[11,"scroll_width","","",4,[[["self"]],["i32"]]],[11,"scroll_height","","",4,[[["self"]],["i32"]]],[11,"scroll","","",4,[[["self"],["f64"],["f64"]]]],[11,"scroll_to","","",4,[[["self"],["f64"],["f64"]]]],[11,"scroll_by","","",4,[[["self"],["f64"],["f64"]]]],[11,"client_top","","",4,[[["self"]],["i32"]]],[11,"client_left","","",4,[[["self"]],["i32"]]],[11,"client_width","","",4,[[["self"]],["i32"]]],[11,"client_height","","",4,[[["self"]],["i32"]]],[11,"scroll_top_max","","",4,[[["self"]],["i32"]]],[11,"scroll_left_max","","",4,[[["self"]],["i32"]]],[11,"inner_html","","",4,[[["self"]],["string"]]],[11,"set_inner_html","","",4,[[["self"],["str"]]]],[11,"outer_html","","",4,[[["self"]],["string"]]],[11,"set_outer_html","","",4,[[["self"],["str"]]]],[11,"insert_adjacent_html","","",4,[[["self"],["str"],["str"]],["result",["jsvalue"]]]],[11,"query_selector","","",4,[[["self"],["str"]],["result",["option","jsvalue"]]]],[11,"slot","","",4,[[["self"]],["string"]]],[11,"set_slot","","",4,[[["self"],["str"]]]],[11,"request_fullscreen","","",4,[[["self"]],["result",["jsvalue"]]]],[11,"request_pointer_lock","","",4,[[["self"]]]],[11,"describe","","",5,[[]]],[11,"into_abi","","",5,N],[11,"none","","",5,N],[11,"from_abi","","",5,N],[11,"is_none","","",5,N],[11,"ref_from_abi","","",5,N],[11,"from","","",5,[[["jsvalue"]],["event"]]],[11,"type_","","",5,[[["self"]],["string"]]],[11,"event_phase","","",5,[[["self"]],["u16"]]],[11,"stop_propagation","","",5,[[["self"]]]],[11,"stop_immediate_propagation","","",5,[[["self"]]]],[11,"bubbles","","",5,[[["self"]],["bool"]]],[11,"cancelable","","",5,[[["self"]],["bool"]]],[11,"prevent_default","","",5,[[["self"]]]],[11,"default_prevented","","",5,[[["self"]],["bool"]]],[11,"composed","","",5,[[["self"]],["bool"]]],[11,"is_trusted","","",5,[[["self"]],["bool"]]],[11,"init_event","","",5,[[["self"],["str"],["bool"],["bool"]]]],[11,"cancel_bubble","","",5,[[["self"]],["bool"]]],[11,"set_cancel_bubble","","",5,[[["self"],["bool"]]]],[11,"clone","","",1,[[["self"]],["headersguardenum"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"from_js_value","","",1,[[["jsvalue"]],["option",["headersguardenum"]]]],[11,"describe","","",1,[[]]],[11,"into_abi","","",1,N],[11,"from_abi","","",1,N],[11,"describe","","",6,[[]]],[11,"into_abi","","",6,N],[11,"none","","",6,N],[11,"from_abi","","",6,N],[11,"is_none","","",6,N],[11,"ref_from_abi","","",6,N],[11,"from","","",6,[[["jsvalue"]],["headers"]]],[11,"append","","",6,[[["self"],["str"],["str"]],["result",["jsvalue"]]]],[11,"delete","","",6,[[["self"],["str"]],["result",["jsvalue"]]]],[11,"get","","",6,[[["self"],["str"]],["result",["option","jsvalue"]]]],[11,"has","","",6,[[["self"],["str"]],["result",["bool","jsvalue"]]]],[11,"set","","",6,[[["self"],["str"],["str"]],["result",["jsvalue"]]]],[11,"describe","","",7,[[]]],[11,"into_abi","","",7,N],[11,"none","","",7,N],[11,"from_abi","","",7,N],[11,"is_none","","",7,N],[11,"ref_from_abi","","",7,N],[11,"from","","",7,[[["jsvalue"]],["response"]]],[11,"error","","",7,[[],["response"]]],[11,"redirect","","",7,[[["str"],["u16"]],["result",["response","jsvalue"]]]],[11,"type_","","",7,[[["self"]],["responsetype"]]],[11,"url","","",7,[[["self"]],["string"]]],[11,"redirected","","",7,[[["self"]],["bool"]]],[11,"status","","",7,[[["self"]],["u16"]]],[11,"ok","","",7,[[["self"]],["bool"]]],[11,"status_text","","",7,[[["self"]],["string"]]],[11,"headers","","",7,[[["self"]],["headers"]]],[11,"clone","","",7,[[["self"]],["result",["response","jsvalue"]]]],[11,"clone","","",2,[[["self"]],["responsetype"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"from_js_value","","",2,[[["jsvalue"]],["option",["responsetype"]]]],[11,"describe","","",2,[[]]],[11,"into_abi","","",2,N],[11,"from_abi","","",2,N],[11,"clone","","",3,[[["self"]],["storagetype"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"from_js_value","","",3,[[["jsvalue"]],["option",["storagetype"]]]],[11,"describe","","",3,[[]]],[11,"into_abi","","",3,N],[11,"from_abi","","",3,N],[18,"NONE","","",5,N],[18,"CAPTURING_PHASE","","",5,N],[18,"AT_TARGET","","",5,N],[18,"BUBBLING_PHASE","","",5,N],[18,"ALT_MASK","","",5,N],[18,"CONTROL_MASK","","",5,N],[18,"SHIFT_MASK","","",5,N],[18,"META_MASK","","",5,N]],"paths":[[4,"ScrollLogicalPosition"],[4,"HeadersGuardEnum"],[4,"ResponseType"],[4,"StorageType"],[3,"Element"],[3,"Event"],[3,"Headers"],[3,"Response"]]};
initSearch(searchIndex);
